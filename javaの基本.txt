java ee
サーバー
java me 
スマホ用
java se

java seの上にjava ee java meがある

変数の宣言と初期化（初期値決める）を忘れないように。
変数の宣言をするとわかりやすい

定数とは「値が変化しないもの。 定まっているもの。」 変数とは「値が変化するもの。
比較しながらノートをとる
具体化する

後入れ先出し

public class Hello {
	public static void main(String[] args) {
		int a = 10;
		int b = 20;
		int c = 30;
		int d = a + b * c;
		//int d = (a + b) * c;
		System.out.println(d);
	}
}

public class Hello {
	public static void main(String[] args) {
		String a = "$";
		System.out.println(a + 10 + 10);
	}
}
左から出力するので(a1010)になる

public class Hello {
	public static void main(String[] args) {
		String a = "yen";
		System.out.println(10 + 10 + a);
	}
}

左から出力するので(20yen)になる

[とても注意するとこ]
public class Hello {
	public static void main(String[] args) {
		int a = 10;
		int b = a++;//前置き
		int c = ++a;//後置き
		System.out.println(a);
		System.out.println(b);
		System.out.println(c);
	}
}
//プログラムは上から下に動く
//bはaを代入したのちにaに１を足す（上から下に動くのでこの行を動かさない限りb=10に固定される）
//int b = a 
//a = a+1しているのと同じ
//cには1+aが入る
//int c = 1+a
//a = a+1



public class Hello {
	public static void main(String[] args) {
		int a = 10;
		long b = 20;
		System.out.println(a + b);
	}
}

種類	データ型	ビット数	値
真偽値	boolean	1ビット	真偽値,falseまたはtrue
文字型	char 	16ビット	Unicode文字 ¥u0000～¥uFFFF
整数型	byte	8ビット	-128～127
	short	16ビット	-32768～32767
	int	32ビット	-2147483648～2147483647
	long	64ビット	-9223372036854775808～9223372036854775807
浮動小数型	float	32ビット	
単精度浮動小数点数　double	64ビット	倍精度浮動小数点数
（ここはatomで書き直す）

public class test {

	public static void main(String[] args) {
		int a = 10;
		long b = 20;
		int result1 = a+b;
		long result2 =a+b;
		System.out.println(result1);
		System.out.println(result2);

	}

}
result1　intはlongよりバイトが少ないのでlongからintに変換しようとするとあふれてしまってエラーが出てしまう

result2　

コマンドライン引数

class Test {
  public static void main(String[] args) {
    System.out.println(args[1] + args[2] );
  }
}

実行する際は、次とする
Java Test 1 2

コンパイルした実行結果を選べ　１つである
１．	コンパイルエラー
２．	コンパイルできるが、実行時エラーが発生
３．	３と出力する
４．	12と出力する
５．	１２と出力する

答え:1
理由:arg[2]は配列の三番目を意味するこの関数の引数は2つしかないので、配列に三番目はない、なのでエラーが出る。

あとでエクセルでまとめる
変数の宣言と初期化
変数
算術演算子
インクリメント（＋＋）とデクリメント（ーー）
and演算　&&で表現　
or演算

if 以上とか以下とかの範囲が得意
swich　a=1などの数値などがわかりきっている時
嫌いな書き方でもある程度はできないといけない

トレース表を普段から書く
どうやったら具体化できるか考える

エクセルと紙の両方にトレース表を書く

電卓とかを作って見る
for 繰り返しの回数の上限がある時
while 上限がない時
難しいことを簡単にすることが大事
int int return
ガキ使のボードゲームを再現

構造化設計　開発コストの削減　
オブジェクト指向設計　保守コストの削減

構造化設計も大事、でも構造化設計だけではだめ

オブジェクト指向　チーム戦でやるためのプログラミングのやりかた（ゆえに個人だと少しやりにくい）

構造化設計　処理から考える
オブジェクト指向　どのようなデータから考える

どのようなプログラムも、処理側、データ側からみて、流れを作る
処理とデータを一緒にしたほうがやりやすい

カプセル化　データと処理
人間は数が多いと間違えてしまう
ややこしいとこから操る

例えば、レシピと材料を一緒に用意しておいておく感覚
料理初心者に、レシピと材料を一緒に渡して「これを使ってね」て言う感覚

データ隠蔽　アクセス制御
チームでしている、新人もいる作ったものを壊されないように元々触らせないようにする

抽象化
マニュアルを作る感覚
例えば、バイトの人たちに同じお店の味のカレーを作ってもらうためにマニュアルを作って実行してもらう感覚
共通部分だけをみて異なる部分を見ないことで、全体を単純化


データ隠蔽　情報隠蔽
マニュアルを守る感覚
例えば、バイトの人たちにお店の味を守ってもらうために、マニュアルを厳守してもらう感覚
設計意図に反した利用や変更を防ぐために、オブジェクトに対するアクセス制御をかけて
オブジェクトやソフトウェア構造を隠蔽すること


オブジェクト指向　三本柱
カプセル化
継承
多様性(ポリモーフィズム)色んな方向から見る

javaで大事なこと
チーム戦である、すべてが自分と同じと思うな。新人もいる。
新人も戦力になるように育てないといけない。
人間は、複雑なことは得意ではない。ミスをする
自分のした仕事に責任を持て。遊びや空論ではない

Ｊａｖａを使うと、嫌でもＯＯＰ風になるが、ＯＯＰのメリットを完全に受けれるわけではない。	
構造化プログラミングにＯＯＰを取り入れた言語になる

クラスメソッドには、staticがつかない


エディターと統合開発環境をうまく使い分ける
